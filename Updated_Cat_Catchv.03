import pygame
from pygame.locals import *
import random
import sys
import os
import math
import re

# Constants
SCREEN_WIDTH = 1080
SCREEN_HEIGHT = 720
SQUARE_SIZE = 90
NUM_SQUARES = 18
CENTER_AVOID_AREA = pygame.Rect(550, 355, 100, 100)
START_POSITION = (50, 50)
START_TIME = 30  

class CatCatchGame:
    def __init__(self):
        pygame.init()
        self.screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
        self.clock = pygame.time.Clock()

        self.main_title = MainTitle()
        self.num_squares = NUM_SQUARES
        self.paths = generate_square_paths(self.num_squares)
        self.squares = create_squares(self.num_squares, self.paths)
        self.color = (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))
        self.center_avoid_area = CENTER_AVOID_AREA
        self.main_rect = pygame.Rect(START_POSITION[0], START_POSITION[1], SQUARE_SIZE, SQUARE_SIZE)
        self.start_time = pygame.time.get_ticks() 

    def handle_events(self):
        for event in pygame.event.get():
            if event.type == KEYDOWN:
                if event.key == K_ESCAPE:
                    pygame.quit()
                    sys.exit()
            elif event.type == QUIT:
                pygame.quit()
                sys.exit()

    def update(self):
        update_square_positions(self.squares, self.center_avoid_area, self.start_time, self.main_rect, speed_factor=50)

    def draw(self):
        self.screen.fill((255, 198, 198))
        self.screen.blit(self.main_title.surface, (0, 0))
        draw_squares(self.screen, self.squares, self.color)
        draw_countdown_clock(self.screen, self.start_time)

        # Finds the frozen square
        frozen_square = next((square for square in self.squares if square['direction'] == 'freeze'), None)

        if frozen_square:
            # Creates a red circle around the frozen square
            circle_radius = int(max(frozen_square['rect'].width, frozen_square['rect'].height) * 1.2)
            circle_center = frozen_square['rect'].center
            pygame.draw.circle(self.screen, (255, 0, 0), circle_center, circle_radius, 3)

        pygame.display.update()

    def run(self):
        while True:
            self.handle_events()
            self.update()
            self.draw()
            self.clock.tick(60)

class MainTitle:
    def __init__(self, text="Cat Catch"):
        self.surface = pygame.Surface((SCREEN_WIDTH, SCREEN_HEIGHT), pygame.SRCALPHA)
        self.surface.fill((255, 200, 200, 0))  # Makes the background transparent

        font_path = os.path.abspath(r"C:\Users\Ron\Desktop\Python files misc\comic-sans-ms\ComicSansMS3.ttf")
        font = pygame.font.Font(font_path, int(87.5 * 1.75))

        text_rendered = font.render(text, True, (0, 128, 128))

        text_rect = text_rendered.get_rect(center=self.surface.get_rect().center)
        box_rect = pygame.Rect(text_rect.x - 10, text_rect.y - 10, text_rect.width + 20, text_rect.height + 20)

        pygame.draw.rect(self.surface, (0, 128, 128, 128), box_rect)  # Sets alpha value for transparency
        self.surface.blit(text_rendered, text_rect)

def generate_square_paths(num_paths):
    base_path = r"C:\Users\Ron\Desktop\Python files misc\Bellas_cat_glossary\finalcat"
    filenames = ["cat.burger.png", "jcat.png", "monstacat.png", "purrito.png", "robocat.png", "cookie.cat.png", "game.cat.png", "heart.cat.png", "idk.cat.png", "lava.cat.png", "poptart.cat.png", "shroom.cat.png", "star.cat.png", "straw.cat.png", "tongue.cat.png", "candy.cat.png", "snow.cat.png", "bears.cat.png"]
    return [os.path.abspath(os.path.join(base_path, filename)) for filename in filenames]

def create_squares(num_squares, paths):
    squares = []
    for i in range(num_squares):
        square = pygame.Rect(random.randint(70, SCREEN_WIDTH - SQUARE_SIZE - 0), 
                             random.randint(70, SCREEN_HEIGHT - SQUARE_SIZE - 70), 
                             SQUARE_SIZE, SQUARE_SIZE)
        squares.append({"rect": square, "path": paths[i], "direction": random.choice(['left', 'right', 'up', 'down'])})
    return squares

def is_in_center_avoid_area(rect, center_area_rect):
    return not rect.colliderect(center_area_rect)

def is_collision(rect1, rect2):
    return rect1.colliderect(rect2)

def find_closest_square(main_rect, squares, center_avoid_area):
    min_distance = float('inf')
    closest_square = None
    main_center = main_rect.center

    for square in squares:
        square_center = square['rect'].center
        distance = math.sqrt((main_center[0] - square_center[0])**2 + (main_center[1] - square_center[1])**2)

        if distance < min_distance and is_in_center_avoid_area(square['rect'], center_avoid_area):
            min_distance = distance
            closest_square = square

    return closest_square

def update_square_positions(squares, center_avoid_area, timer, main_rect, speed_factor=10.0):
    if pygame.time.get_ticks() > timer + 30000:
        # If more than 30 seconds have passed, stop updating positions
        closest_square = find_closest_square(main_rect, squares, center_avoid_area)
        if closest_square:
            # Displays the file name of the closest square without the ".png"
            file_name = os.path.splitext(os.path.basename(closest_square['path']))[0]
            display_file_name(game.screen, file_name)

            # Freezes the closest square not within the center avoid area
            if is_in_center_avoid_area(closest_square['rect'], center_avoid_area):
                closest_square['direction'] = 'freeze'

            pygame.display.update()

        return

    for square in squares:
        square_speed = random.uniform(50.0, 2.0)
        
        # Updates position based on direction
        if square['direction'] == 'left' and square['rect'].left > 0:
            square['rect'].x -= square_speed
        elif square['direction'] == 'right' and square['rect'].right < SCREEN_WIDTH:
            square['rect'].x += square_speed
        elif square['direction'] == 'up' and square['rect'].top > 0:
            square['rect'].y -= square_speed
        elif square['direction'] == 'down' and square['rect'].bottom < SCREEN_HEIGHT:
            square['rect'].y += square_speed
        
        # Checks for collisions with other squares
        for other_square in squares:
            if other_square != square and is_collision(square['rect'], other_square['rect']):
                # Adjusts direction to avoid collision
                square['direction'] = random.choice(['left', 'right', 'up', 'down'])
                break  # Break out of the inner loop after adjusting for one collision

    # Finds the closest square to the "Cat Catch" text
    closest_square = find_closest_square(main_rect, squares, center_avoid_area)

    # Freezes the closest square not within the center avoid area
    if closest_square and is_in_center_avoid_area(closest_square['rect'], center_avoid_area):
        closest_square['direction'] = 'freeze'

def display_file_name(screen, file_name):
    font_path = os.path.abspath(r"C:\Users\Ron\Desktop\Python files misc\comic-sans-ms\ComicSansMS3.ttf")
    font = pygame.font.Font(font_path, 76)

    # Uses regular expression to remove the ".png" extension
    file_name_without_extension = re.sub(r'\.png$', '', file_name)

    text = font.render(file_name_without_extension, True, (0, 128, 128))
    text_rect = text.get_rect(center=(SCREEN_WIDTH // 2, 150))  
    screen.blit(text, text_rect)

def draw_squares(screen, squares, color):
    for square in squares:
        pygame.draw.rect(screen, color, square['rect'])

        
        thumbnail_path = square['path']
        thumbnail = pygame.image.load(thumbnail_path)
        thumbnail = pygame.transform.scale(thumbnail, (int(square['rect'].width * 0.8), int(square['rect'].height * 0.8)))

        
        thumbnail_rect = thumbnail.get_rect(center=square['rect'].center)
        screen.blit(thumbnail, thumbnail_rect)

def draw_countdown_clock(screen, start_time):
    elapsed_time = pygame.time.get_ticks() - start_time
    remaining_time = max(0, START_TIME - elapsed_time // 1000)  
    font = pygame.font.Font(None, 36)
    text = font.render(f"Time: {remaining_time}s", True, (0, 128, 128))
    screen.blit(text, (SCREEN_WIDTH - 130, SCREEN_HEIGHT - 70))  

if __name__ == "__main__":
    game = CatCatchGame()
    game.run()
